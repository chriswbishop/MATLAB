function [POUT]=hrtf_subject_prep(sid, P, cfilt, d, n)
% DESCRIPTION:
%
%   A wrapper function to create subject specific filters generated by our
%   Audiogram (see Kerlin's code) and hrtf_cal_prep.m (Bishop's code).  It
%   does a lot, including the following.
%       1) Create subject specific HRTFs from rds structure.
%       2) Create subject specific corrective filter from multiple hearing
%          tests.
%       3) Convolve source files with destructive filter (cfilt). Write
%          file.
%       4) Convolve (3) with corrective filter. Write file.
%       5) Normalize RMS of source files, (3), and (4)
%       6) Convolve files with subject specific HRTF and create output for
%          Presentation. (call to hrtf_cal_prep)
%
% INPUT:
%
%   sid:    string, subject ID (e.g., 's1399')
%   P:      char matrix, each line is the full path to the UNFILTERED
%           source files you would like to use. 
%   cfilt:  string, full path to mat file with crapifying filter in it.
%           Alteratively, cfilt can be a structure of size 2, with the
%           first member being the filter for the left channel (channel 1)
%           and the second filter for the right channel (channel 2). Hdw
%           should be the variable name.
%   d:      double array, angles to be tested.
%   n:      integer, number of trials per stimulus per location.
%
% OUTPUT:
%
%   sid_Pc.wav: files convolved with cfilt.
%   sid_Pr.wav: files convolved with both cfilt and rfilt. 
%
% OTHER:
%
%   hrtf_cal_prep and hrtf_filt will output a series of WAV files into
%   'C:\Documents and Settings\cwbishop\My
%   Documents\Presentation\HRTF_validate\stims\%sid%' and a text file
%   (input.txt) used by Presentation software.  
%
% Bishop, Chris Miller Lab 2009

%% CREATE SUBJECT'S HRTF
hdir='C:\Documents and Settings\cwbishop\My Documents\Presentation\hrtfs';
sdir='C:\Documents and Settings\cwbishop\My Documents\Presentation\HRTF_validate\stims';
fdir='C:\Documents and Settings\cwbishop\My Documents\matlab\aeq_test\filters\';

% Have to loop through recordings because of memory issues with many
% locations.  
if ~exist(fullfile(hdir,sid, [sid '-hds.mat']), 'file')
    load(fullfile(hdir, sid, [sid '-rds.mat']), 'rds');
    for z=1:size(rds.rec,3)
        trds.itd=rds.itd(z); trds.ild=rds.ild(z); trds.rec=rds.rec(:,:,z);
        trds.thetaVec=rds.thetaVec(z); trds.sub=rds.sub;trds.fs=rds.fs;trds.ref=rds.ref;
        [OUT]=hrtf_compute(trds, [], 15000);
        hds.sub=rds.sub; hds.hrir(:,:,z)=OUT.hrir; hds.hrtf(:,:,z)=OUT.hrtf;
        hds.thetaVec(z)=OUT.thetaVec; hds.fs=rds.fs;
    end % z   
    save(fullfile(hdir,sid, [sid '-hds.mat']), 'hds');
else
    load(fullfile(hdir,sid, [sid '-hds.mat']), 'hds');
    warning([fullfile(hdir,sid, [sid '-hds.mat']) ' exists. Skipping hrtf_compute.']);
end 

%% VARIABLE CHECKS
if ~exist('d', 'var') || isempty(d), d=hds.thetaVec; end
if ~exist('cfilt', 'var') || isempty(cfilt)
    cfilt=fullfile(fdir,'cfilt.mat');
end
if isstr(cfilt), load(cfilt, 'Hdw'); cfilt=Hdw; end; clear Hdw;

%% CREATE SUBJECT SPECIFIC CORRECTIVE FILTER (rfilt)
[Hdw]=aeq_make_filter(sid);
save(fullfile(fdir,[sid '-rfilt.mat']), 'Hdw');
rfilt=Hdw; clear Hdw;

%% CREATE SUBJECT DIRECTORY
mkdir(fullfile(sdir, sid));

POUT=[];
%% FILTER EACH SOURCE FILE IN P
for z=1:size(P,1)
    %% GENERATE CFILT AND CFILT+RFILT FILES
    Fwav=P(z,:);
    [in, fs]=wavread(Fwav);
    if size(in,2)==1, in=[in in]; end
    % Resample if necessary. Assumes a 44100 Hz sampled filter in cfilt and
    % rfilt.
    in=[resample(in(:,1),44100,fs) resample(in(:,2),44100,fs)];
%     cout=[fftfilt(cfilt(1).Numerator,in(:,1)) fftfilt(cfilt(2).Numerator,in(:,2))];
%     rout=[fftfilt(rfilt(1).Numerator,cout(:,1)) fftfilt(rfilt(2).Numerator,cout(:,2))];
    cout=[filtfilt(cfilt(1).Numerator,1,in(:,1)) filtfilt(cfilt(2).Numerator,1,in(:,2))];
    rout=[filtfilt(rfilt(1).Numerator,1,cout(:,1)) filtfilt(rfilt(2).Numerator,1,cout(:,2))];
    % Normalize A-weighted RMS.  Need to normalize across stimuli.
    % Currently only does it WITHIN stimuli.
    r=[aw_rms(in, 44100); aw_rms(cout, 44100); aw_rms(rout, 44100)];
    m=mean(mean(r));
    in=in.*(m./mean(r(1,:))); cout=cout.*(m./mean(r(2,:))); rout=rout.*(m./mean(r(3,:)));
    [PATHSTR,NAME,EXT,VERSN] = fileparts(P(z,:));
    sP=fullfile('C:\Documents and Settings\cwbishop\My Documents\Presentation\HRTF_validate\stims\',sid,[sid NAME EXT]);
    cP=fullfile('C:\Documents and Settings\cwbishop\My Documents\Presentation\HRTF_validate\stims\',sid,[sid NAME 'c' EXT]);
    rP=fullfile('C:\Documents and Settings\cwbishop\My Documents\Presentation\HRTF_validate\stims\',sid,[sid NAME 'r' EXT]);
    in=[resample(in(:,1),fs,44100) resample(in(:,2),fs,44100)];
    cout=[resample(cout(:,1),fs,44100) resample(cout(:,2),fs,44100)];
%     rout=[resample(rout(:,1),fs,44100) resample(rout(:,2),fs,44100)];
    wavwrite(in,fs,16,sP);
    wavwrite(cout,fs,16,cP);
    wavwrite(rout,fs,16,rP);
    POUT=strvcat(POUT, sP, cP, rP);
%     POUT=strvcat(POUT, sP, cP);
end % z

%% CREATE STIMULI AND INPUT FILE FOR PRESENTATION (see hrtf_cal_prep for
%% details)
hrtf_cal_prep(hds, d, POUT, n);